name: Auto Project Assign + Labels (AToH Build Template)

on:
  issues:
    types: [opened]

permissions:
  issues: write
  contents: read

jobs:
  autofield:
    runs-on: ubuntu-latest
    steps:
      - name: Add to AToH Project #10
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.PROJECT_TOKEN }}
          script: |
            const projectId = "PVT_kwDOCrSiBs4A9M3t";
            const fields = {
              buildType: {
                id: "PVTSSF_lADOCrSiBs4A9M3tzgw-USk",
                map: {
                  "steeple": "a31c34f8",
                  "tower": "5e03e9c5",
                  "citadel": "9ef2665c",
                  "great citadel": "0c488493",
                  "obelisk": "875163b7",
                  "area hub": "8cb5ca25",
                  "area winroom": "1c41c90f"
                }
              },
              difficulty: {
                id: "PVTSSF_lADOCrSiBs4A9M3tzgw-USo",
                map: {
                  "easy": "4b637738",
                  "medium": "a6de0169",
                  "hard": "527262c1",
                  "difficult": "ccdc7918",
                  "challenging": "e3e4c690",
                  "intense": "66c9032c",
                  "remorseless": "869a82e1",
                  "insane": "ce0cae9a",
                  "extreme": "4fb4a825",
                  "terrifying": "c43a65f1",
                  "catastrophic": "afb1b97f",
                  "horrific": "257559e5",
                  "unreal": "d96953ee"
                }
              },
              area: {
                id: "PVTSSF_lADOCrSiBs4A9M3tzgw-USs",
                map: {
                  "area 1": "109c0b38",
                  "area 2": "1004f931",
                  "area 3": "a9a7be10",
                  "area 4": "79b8e3fa",
                  "area 5": "0f0b0cc3",
                  "area 6": "6da136fc",
                  "area 7": "17320548",
                  "area 8": "45584adb",
                  "area 9": "e2ec7424",
                  "area 10": "e42a5a48",
                  "the obelisk": "e89809fd"
                }
              }
            };

            function extract(field) {
              const regex = new RegExp(`### ${field}\\s+([\\s\\S]*?)(?=\\n###|$)`, 'i');
              const match = context.payload.issue.body.match(regex);
              return match ? match[1].trim().toLowerCase() : null;
            }

            const buildType = extract("Build Type");
            const difficulty = extract("Difficulty");
            const area = extract("Area");

            console.log("Extracted values:", { buildType, difficulty, area });

            const buildTypeId = fields.buildType.map[buildType];
            const difficultyId = fields.difficulty.map[difficulty];
            const areaId = fields.area.map[area];

            console.log("Mapped option IDs:", { buildTypeId, difficultyId, areaId });

            const issueId = context.payload.issue.node_id;

            const itemResp = await github.graphql(`
              mutation($projectId: ID!, $contentId: ID!) {
                addProjectV2ItemById(input: {
                  projectId: $projectId,
                  contentId: $contentId
                }) {
                  item { id }
                }
              }
            `, {
              projectId,
              contentId: issueId
            });

            const itemId = itemResp.addProjectV2ItemById.item.id;

            async function setField(fieldName, optionId) {
              const fieldId = fields[fieldName].id;
              if (!optionId) return;

              console.log(`Setting field ${fieldName} = ${optionId}`);

              await github.graphql(`
                mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $optionId: String!) {
                  updateProjectV2ItemFieldValue(input: {
                    projectId: $projectId,
                    itemId: $itemId,
                    fieldId: $fieldId,
                    value: { singleSelectOptionId: $optionId }
                  }) {
                    projectV2Item { id }
                  }
                }
              `, {
                projectId,
                itemId,
                fieldId,
                optionId
              });
            }

            await setField("buildType", buildTypeId);
            await setField("difficulty", difficultyId);
            await setField("area", areaId);
